1逐行讲解HashMap源码实现
2.HashMap中位运算的使用
3.JDK7中为什么多线程情况下HashMap扩容会出现问题
4.通过源码掌握JDK8中关于HashMap的优化
5.通过源码总结HashMap使用技巧。

测试
HashMap<String,String> hashMap = new HashMap<String,String>();
hashMap.push("1","2");
String oldValue = hashMap.push("1","3");
System.out.println(value);

当hashMap会把3覆盖2然后把2返回到oldValue
hashMap是由数组，链表，红黑树组成。
new HashMap是会把容量赋值给阈值 threshold = initialCapacity; 在put为空的数组是进行懒加载.

如何判断一个数是2的幂次方数？ 当一个数转成二进制数后只有一个bit位是1，这个数就是2的幂次方数
如：1000 == 8 == 2^3

//highestOneBit() 运用位运算把最高位数的后位数去掉得到与输入值最接近的2的幂次方数
public static int highestOneBit(int i){
  i |= (i >> 1);
  i |= (i >> 2);
  i |= (i >> 4);
  i |= (i >> 8);
  i |= (i >> 16);
  return i - (i>>>1);
}
//但是上一个方法进行了一个处理(number - 1) << 1
//这个运算是先把他减一然后增加了一位bit让本来就是2的幂次方数适合用于本次方法。

然后把得出的结果来作为生成hashMap new Entry[结果]的边界值
